package main

import (
	"fmt"
	"log"
	"math"
	"time"

	"github.com/tarm/serial"
)

func main() {

	fmt.Println("Go Pi!")

	c := &serial.Config{Name: "/dev/ttyAMA0", Baud: 115200}
	s, err := serial.OpenPort(c)
	if err != nil {
		log.Fatal(err)
	}

	cycleDuration := 500 * time.Millisecond
	minVal := 1
	maxVal := 8
	timeStart := time.Now()

	var aVal int
	var currentVal int
	for {
		aVal = valForEasing(time.Since(timeStart), minVal, maxVal, cycleDuration)
		if aVal != currentVal {
			// fmt.Print(aVal)
			s.Write([]byte{byte(1 << (uint(aVal) - 1))})
		}
		currentVal = aVal
		time.Sleep(1 * time.Millisecond)
	}

}

func valForEasing(t time.Duration, min, max int, cycleDuration time.Duration) int {
	proportion := float64(t%cycleDuration) / float64(cycleDuration)
	// proportion = linear(proportion)
	proportion = sinlike(proportion)
	return min + int(math.Floor(0.5+(proportion*float64(max-min))))
}

// func linear(in float64) float64 {
// 	return in
// }
func sinlike(in float64) float64 {
	val := (1 - math.Cos(in*(2*math.Pi))) / 2
	return val
}
